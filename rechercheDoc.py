#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Dec 03, 2018 02:25:20 PM CET  platform: Linux

import sys
from tkinter.filedialog import askopenfilename

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def vp_start_gui(Controler):
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root,Controler)
    root.mainloop()

w = None
def create_Toplevel1(root,controler, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w,controler)
    return (w,top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None,Controler=None):

        self.lastRecherhcehe = []

        self.var_stem=tk.IntVar()
        self.var_stoplist=tk.IntVar()
        self.var_pq=tk.IntVar()
        self.var_jocker=tk.IntVar()



        self.Controler = Controler
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 

        top.geometry("1200x534+650+150")
        top.title("Recherche Documentaire")
        top.configure(background="#d8d8d8")

        '''liste des element de l'interface'''
        self.filename = ""

        self.Entry1 = tk.Entry(top)
        self.Entry1.place(relx=0.017, rely=0.037,height=40, relwidth=0.443)
        self.Entry1.configure(background="#66ff66")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(width=266)

        self.Button1 = tk.Button(top,command=self.search)
        self.Button1.place(relx=0.333, rely=0.225, height=28, width=69)
        self.Button1.configure(text='''Search''')

        self.Labelframe1 = tk.LabelFrame(top)
        self.Labelframe1.place(relx=0.017, rely=0.187, relheight=0.356
                , relwidth=0.3)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(text='''Labelframe''')
        self.Labelframe1.configure(background="#d8d8d8")
        self.Labelframe1.configure(width=180)

        self.Checkbutton1 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton1.place(relx=0.056, rely=0.211, relheight=0.211
                , relwidth=0.400, bordermode='ignore')
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(text='''Stemming''')
        self.Checkbutton1.configure(variable=self.var_stem)


        self.Checkbutton2 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton2.place(relx=0.056, rely=0.421, relheight=0.211
                , relwidth=0.400, bordermode='ignore')
        self.Checkbutton2.configure(justify='left')
        self.Checkbutton2.configure(text='''Stop list''')
        self.Checkbutton2.configure(variable=self.var_stoplist)


        self.Checkbutton3 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton3.place(relx=0.056, rely=0.632, relheight=0.211
                , relwidth=0.400, bordermode='ignore')
        self.Checkbutton3.configure(justify='left')
        self.Checkbutton3.configure(text='''Phrasal queries''')
        self.Checkbutton3.configure(variable=self.var_pq)


        self.Checkbutton4 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton4.place(relx=0.556, rely=0.211, relheight=0.211
                , relwidth=0.344, bordermode='ignore')
        self.Checkbutton4.configure(justify='left')
        self.Checkbutton4.configure(text='''Jocker *''')
        self.Checkbutton4.configure(variable=self.var_jocker)


        self.Checkbutton5 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton5.place(relx=0.556, rely=0.421, relheight=0.211
                , relwidth=0.344, bordermode='ignore')
        self.Checkbutton5.configure(justify='left')
        self.Checkbutton5.configure(text='''Check''')

        self.Checkbutton6 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton6.place(relx=0.556, rely=0.632, relheight=0.211
                , relwidth=0.344, bordermode='ignore')
        self.Checkbutton6.configure(justify='left')
        self.Checkbutton6.configure(text='''Check''')

        self.Listbox1 = tk.Listbox(top)
        self.Listbox1.place(relx=0.017, rely=0.562, relheight=0.39
                , relwidth=0.44)
        self.Listbox1.configure(background="#66ff66")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(width=264)

        self.Labelframe2 = tk.LabelFrame(top)
        self.Labelframe2.place(relx=0.483, rely=0.037, relheight=0.918
                , relwidth=0.5)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(text='''Labelframe''')
        self.Labelframe2.configure(background="#30d83b")
        self.Labelframe2.configure(width=300)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Button2 = tk.Button(top)
        self.Button2.place(relx=0.333, rely=0.337, height=28, width=69)
        self.Button2.configure(text='''Collections''')

        self.Button3 = tk.Button(top,command=sys.exit)
        self.Button3.place(relx=0.333, rely=0.449, height=28, width=69)
        self.Button3.configure(text='''Exit''')

    def sendResultat(self, liste):
        self.lastRecherhcehe = liste
        self.Listbox1.delete(0,self.Listbox1.size()-1)
        titres = []
        for elt in liste:
            titres.append(self.Controler.info[elt].titre)
        for titre in titres:
            self.Listbox1.insert(0,titre)


    def search(self):
        self.Controler.rechercherIndex(self.Entry1.get(), [self.var_stem.get(), self.var_stoplist.get(),self.var_pq.get(),self.var_jocker.get()])


if __name__ == '__main__':
    vp_start_gui()
